#简言之，数据映射模式就是将对象和数据存储映射起来，对一个对象的操作会映射为对数据存储的操作。


数据映射，是在持久化数据存储层（一般是关系型数据库）和驻于内存的数据表现层之间进行双向数据传输的数据访问层。

数据映射模式的目的是让持久化数据存储层，驻于内存的数据表现层，以及数据映射本身三者相互独立、互不依赖。这个数据访问层由一个映射器（或者数据访问对象）组成，用于实现数据传输。通用的数据访问层可以处理不同的实体类型，而专用的则处理一个或几个。

数据映射模式的核心在于它的数据模型遵循单一职责原则（single Responsibility Principle）,这也是和Active Record模式的不同之处。最典型的数据映射模式例子就是数据库ORM模型（Object Relational Mapper）。


#ORM一
一、ORM简介 
        对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。那么，到底如何实现持久化呢？一种简单的方案是采用硬编码方式，为每一种可能的数据库访问操作提供单独的方法。 
        这种方案存在以下不足： 
        1.持久化层缺乏弹性。一旦出现业务需求的变更，就必须修改持久化层的接口 
        2.持久化层同时与域模型与关系数据库模型绑定，不管域模型还是关系数据库模型发生变化，毒药修改持久化曾的相关程序代码，增加了软件的维护难度。 

        ORM提供了实现持久化层的另一种模式，它采用映射元数据来描述对象关系的映射，使得ORM中间件能在任何一个应用的业务逻辑层和数据库层之间充当桥梁。Java典型的ORM中间件有:Hibernate,ibatis,speedframework。 
        ORM的方法论基于三个核心原则： 
　　· 简单：以最基本的形式建模数据。 
　　· 传达性：数据库结构被任何人都能理解的语言文档化。 
　　· 精确性：基于数据模型创建正确标准化了的结构。 

二、ORM的概念 
        让我们从O/R开始。字母O起源于"对象"(Object),而R则来自于"关系"(Relational)。几乎所有的程序里面，都存在对象和关系数据库。在业务逻辑层和用户界面层中，我们是面向对象的。当对象信息发生变化的时候，我们需要把对象的信息保存在关系数据库中。 
        当你开发一个应用程序的时候(不使用O/R Mapping),你可能会写不少数据访问层的代码，用来从数据库保存，删除，读取对象信息，等等。你在DAL中写了很多的方法来读取对象数据，改变状态对象等等任务。而这些代码写起来总是重复的。 

        ORM解决的主要问题是对象关系的映射。域模型和关系模型分别是建立在概念模型的基础上的。域模型是面向对象的，而关系模型是面向关系的。一般情况下，一个持久化类和一个表对应，类的每个实例对应表中的一条记录，类的每个属性对应表的每个字段。 
        ORM技术特点： 
        1.提高了开发效率。由于ORM可以自动对Entity对象与数据库中的Table进行字段与属性的映射，所以我们实际可能已经不需要一个专用的、庞大的数据访问层。 
        2.ORM提供了对数据库的映射，不用sql直接编码，能够像操作对象一样从数据库获取数据。 

三、ORM的优缺点 
        ORM的缺点是会牺牲程序的执行效率和会固定思维模式。 
        从系统结构上来看,采用ORM的系统一般都是多层系统，系统的层次多了，效率就会降低。ORM是一种完全的面向对象的做法，而面向对象的做法也会对性能产生一定的影响。 

        在我们开发系统时，一般都有性能问题。性能问题主要产生在算法不正确和与数据库不正确的使用上。ORM所生成的代码一般不太可能写出很高效的算法，在数据库应用上更有可能会被误用，主要体现在对持久对象的提取和和数据的加工处理上，如果用上了ORM,程序员很有可能将全部的数据提取到内存对象中，然后再进行过滤和加工处理，这样就容易产生性能问题。 
        在对对象做持久化时，ORM一般会持久化所有的属性，有时，这是不希望的。 
        但ORM是一种工具，工具确实能解决一些重复，简单的劳动。这是不可否认的。但我们不能指望工具能一劳永逸的解决所有问题，有些问题还是需要特殊处理的，但需要特殊处理的部分对绝大多数的系统，应该是很少的。



#ORM二
首先简单的介绍下ORM关系对象映射的概念。虽然NOSQL现在在迅速崛起，但大多数人仍然在使用稳定的关系型数据库，我们将数据组织成记录存储在关系数据库中，每一行代表一条记录。现代编程中，面向对象技术应用已经非常广泛，关系型数据库的数据组织形式与面向对象的数据组织形式存在根本上的差异。ORM的任务就是将关系型数据库中的数据通过ORM层映射为对象，使之能够应用于面向对象程序，方便编程。


它确实为大多数程序员提供了便利：

1、程序员不需要再动手写SQL语句，或者说大部分情况下不需要动手写，只需要调用一系列函数即可完成数据库CURD操作。

2、对不同数据库管理系统的连接以及操作进行了抽象，程序员完全可以不考虑使用的是什么数据库以及数据库的版本。

总之，在中小型的项目开发中，它的确为我们带来了高效的开发效率。


以上即是它的优点，下面进入正题，即ORM的弊端以及它对数据库优化的影响。

缺点：

1、对于复杂的SQL有心无力。

2.、无法完全屏蔽数据库底层细节（这也将是下面讨论的），开发人员仍然要熟悉数据库底层操作。

3、关系-对象映射的实现是以性能为代价，方便了开发，牺牲了效率。

4、多余的工作：大多数ORM框架为了达到屏蔽某些细节问题或者对数据库进行抽象，做了很多额外的工作，而这些工作对于大多数人来说是不需要的。比如，TP的ORM为防止SQL注入，做了很多类似强制类型转换的工作。这样做不仅仅降低了性能，同时也改变了数据本身的意义，对数据造成了污染。


ORM对数据库优化的影响。

ORM由于其屏蔽了数据库的CURD细节，程序员大多数情况下不需要再编写SQL语句，在一个小型的网站中，这样基本是没有什么问题的。即使效率低下，如今的硬件水平也可以弥补软件本身的性能问题。但如果在大型项目中盲目的使用ORM，定会造成性能的低下。原因如下：

1、上面关于ORM缺点已经提到了关于性能的两点问题。

2、数据库优化问题。


我将会重点解释数据库优化这个影响。

大型项目中，数据库关系、索引结构等都是经过严格控制的。程序员编写的SQL语句直接影响到数据库的执行效率（通过影响SQL执行计划），有经验的程序员可以自己动手写出高效的SQL语句，但毫无经验的程序员可能会使用ORM调用先关函数执行数据库操作，或许他能够获得好的执行计划，但我们不能将效率交给上帝来决定。

问题出现了， 根据上面的说法，我们是否需要完全自己动手写出SQL语句呢？我觉得在性能要求较高的情景中，应该是这样的。ORM虽然屏蔽了SQL语句，提高了开发效率，同样的，它也屏蔽了SQL优化的细节。

如果大部分的SQL语句是自己动手写出来的，这时候ORM框架本身也不在有什么值得我们依赖的优势了。我们既然要自己动手写出SQL语句，那么就可以自己动手写出关系-对象映射的简单框架。同样可以实现关系型数据库与面向对象编程的连接。


以上均是始终不够的胡诌八扯，要是哪里说错的，还请指正。
