#将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
#优点


1、建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在导演类中对整体而言可以取得比较好的稳定性。
2、在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。
3、可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。
4、其次，建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成，基本上不用修改之前已经测试通过的代码，因此也就不会对原有功能引入风险。符合开闭原则。

#缺点

1、建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。
2、流程固定

题外话
以前为了应付面试，显得自己比较厉害，有时候一天下来生硬地记下了好几个设计模式，关于各种设计模式的应用场景和优缺点，那时候刚开始的一两天还记得，可过了几天，知识就还给了书本，基本都忘记了，更谈不上运用。记得有一次去面试，问了一个我以前一直认为很简单的单例模式，那时候叫我写出几种单例模式，我嗖的一声就写出类， 饿汉式，懒汉式（双重锁定，静态内部类），登记式。但当面试官问到为什么要使用Synchronized Class而不使用Synchronized this，我竟然搭不上，我知道this是代表当前实例的引用，class是锁住整个Class类，但就是区分不出来。后面回来复习了才知道。
从那以后，我开始静下心来，不再为了变得牛逼而去学习某样东西，这样目的性太强的话我们往往会带有一些浮躁，刚开始的一两个月可能你还能坚持下来了，可一旦你发现你学习了这几样东西，其实你还是跟大多数人一样，这时候的你可能就会浮躁，开始沉不住气了。继而自己开始懈怠，慢慢地你会发现你很慢就坚持静下心来学习了。
一句话，技术这种东西急不来，常常太用力的人跑不远，因为他们往往很难坚持下来。所以，从现在开始，静下心来，一步一个脚印，享受生活，享受编程给我们带来的乐趣。

作者：xujun9411
链接：https://www.jianshu.com/p/03fdba6043c7
来源：简书
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。
